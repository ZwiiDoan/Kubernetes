# Check Accessibility
curl http://service-ip:node-port

# Check pod
kubectl describe pod pod-name

# Check previous pod log
kubectl logs pod-name -f --previous

# Check dependent services
# Check dependent pods
https://kubernetes.io/docs/tasks/debug-application-cluster/debug-application/

### Controlplan failure
# Check node status
kubectl get nodes

# check pods
kubectl get pods
kubectl get pods -n kube-system

# check service
service kube-apiserver status

# check service logs
kubectl logs kube-apiserver-master -n kube-system

sudo journalctl -u kube-apiserver

# Check kubelet service configurations
cat /etc/systemd/system/kubelet.service.d/
# Look for config path, i.e: --config=/var/lib/kubelet/config.yaml
# Get staticPodPath:
grep -i staticPodPath /var/lib/kubelet/config.yaml
# check static pods manifests:
ls /etc/kubernetes/manifests/

### Node failure
Check Node status
kubectl describe node <node-name>

# Check CPU, memory and diskspace on the node
top
df -h

# Check Kubelet Status
service kubelet status/start/stop
systemctl daemon-reload
systemctl restart kubelet
sudo journalctl -u kubelet

# Check Certificates: expiration, right group (i.e: system:nodes), right CA 
openssl x509 -in /var/lib/kubelet/worker-1.crt -text

https://kubernetes.io/docs/tasks/debug-application-cluster/debug-cluster/

# Check Cluster IP and Port
kubectl cluster-info

### Network Troubleshooting
# Network Plugin in kubernetes
Kubernetes uses CNI plugins to setup network. The kubelet is responsible for executing plugins as we mention the following parameters in kubelet configuration.
- cni-bin-dir:   Kubelet probes this directory for plugins on startup
- network-plugin: The network plugin to use from cni-bin-dir. It must match the name reported by a plugin probed from the plugin directory.

# DNS in Kubernetes
Kubernetes uses CoreDNS. CoreDNS is a flexible, extensible DNS server that can serve as the Kubernetes cluster DNS.
Kubernetes resources for coreDNS are:   
- a service account named coredns,
- cluster-roles named coredns and kube-dns
- clusterrolebindings named coredns and kube-dns, 
- a deployment named coredns,
- a configmap named coredns and a
- service named kube-dns.
While analyzing the coreDNS deployment you can see that the the Corefile plugin consists of important configuration which is defined as a configmap.

# Troubleshooting issues related to coreDNS
1. If you find CoreDNS pods in pending state first check network plugin is installed.

2. coredns pods have CrashLoopBackOff or Error state
If you have nodes that are running SELinux with an older version of Docker you might experience a scenario where the coredns pods are not starting. To solve that you can try one of the following options:
a) Upgrade to a newer version of Docker.
b) Disable SELinux.
c) Modify the coredns deployment to set allowPrivilegeEscalation to true:
kubectl -n kube-system get deployment coredns -o yaml | \
  sed 's/allowPrivilegeEscalation: false/allowPrivilegeEscalation: true/g' | \
  kubectl apply -f -
d) Another cause for CoreDNS to have CrashLoopBackOff is when a CoreDNS Pod deployed in Kubernetes detects a loop.
  There are many ways to work around this issue, some are listed here:
- Add the following to your kubelet config yaml: resolvConf: <path-to-your-real-resolv-conf-file> This flag tells kubelet to pass an alternate resolv.conf to Pods. For systems using systemd-resolved, /run/systemd/resolve/resolv.conf is typically the location of the "real" resolv.conf, although this can be different depending on your distribution.
- Disable the local DNS cache on host nodes, and restore /etc/resolv.conf to the original.
- A quick fix is to edit your Corefile, replacing forward . /etc/resolv.conf with the IP address of your upstream DNS, for example forward . 8.8.8.8. But this only fixes the issue for CoreDNS, kubelet will continue to forward the invalid resolv.conf to all default dnsPolicy Pods, leaving them unable to resolve DNS.

3. If CoreDNS pods and the kube-dns service is working fine, check the kube-dns service has valid endpoints.
    kubectl -n kube-system get ep kube-dns
If there are no endpoints for the service, inspect the service and make sure it uses the correct selectors and ports.

# Kube-Proxy
kube-proxy is a network proxy that runs on each node in the cluster. kube-proxy maintains network rules on nodes. These network rules allow network communication to the Pods from network sessions inside or outside of the cluster.

In a cluster configured with kubeadm, you can find kube-proxy as a daemonset.

kubeproxy is responsible for watching services and endpoint associated with each service. When the client is going to connect to the service using the virtual IP the kubeproxy is responsible for sending traffic to actual pods.

If you run a kubectl describe ds kube-proxy -n kube-system you can see that the kube-proxy binary runs with following command inside the kube-proxy container.

    Command:
      /usr/local/bin/kube-proxy
      --config=/var/lib/kube-proxy/config.conf
      --hostname-override=$(NODE_NAME)
 
    So it fetches the configuration from a configuration file ie, /var/lib/kube-proxy/config.conf and we can override the hostname with the node name of at which the pod is running.

  In the config file we define the clusterCIDR, kubeproxy mode, ipvs, iptables, bindaddress, kube-config etc.

# Troubleshooting issues related to kube-proxy
1. Check kube-proxy pod in the kube-system namespace is running.
2. Check kube-proxy logs.
3. Check configmap is correctly defined and the config file for running kube-proxy binary is correct.
4. kube-config is defined in the config map.
5. check kube-proxy is running inside the container
# netstat -plan | grep kube-proxy
tcp        0      0 0.0.0.0:30081           0.0.0.0:*               LISTEN      1/kube-proxy
tcp        0      0 127.0.0.1:10249         0.0.0.0:*               LISTEN      1/kube-proxy
tcp        0      0 172.17.0.12:33706       172.17.0.12:6443        ESTABLISHED 1/kube-proxy
tcp6       0      0 :::10256                :::*                    LISTEN      1/kube-proxy

# References:
Debug Service issues:
                     https://kubernetes.io/docs/tasks/debug-application-cluster/debug-service/

DNS Troubleshooting:
                     https://kubernetes.io/docs/tasks/administer-cluster/dns-debugging-resolution/

